#!/usr/bin/env python

import sys
import ipaddress
import struct
import socket

def generate_new_addr(org_addr, new_netrange):
    org = ipaddress.IPv4Interface(org_addr)
    org_ip = org.ip
    org_hostmask = org.hostmask
    org_ip_bin = struct.unpack("!L", org_ip.packed)[0]
    org_hostmask_bin = struct.unpack("!L", org_hostmask.packed)[0]
    org_hostonly_bin = org_ip_bin & org_hostmask_bin

    #
    # These two procedures mean to get a pure network address
    #
    # new_netrange = u'172.30.20.100/24'
    _new = ipaddress.IPv4Interface(new_netrange)
    _new_network = _new.network

    new = ipaddress.IPv4Interface(_new_network)
    new_netip = new.ip
    new_netip_bin = struct.unpack("!L", new_netip.packed)[0]
    new_ip_bin = new_netip_bin | org_hostonly_bin
    new_ip = socket.inet_ntoa(struct.pack("!L", new_ip_bin))

    new_prefix = new.network.prefixlen
    new_addr = new_ip + '/' + str(new_prefix)
    return new_addr

if __name__ == '__main__':
    org_addr = unicode(sys.argv[1])
    new_netrange = unicode(sys.argv[2])

    org = ipaddress.IPv4Interface(org_addr)
    new = ipaddress.IPv4Interface(new_netrange)
    if org.network.prefixlen != new.network.prefixlen:
        print "Error: netmask not match, exit"
        sys.exit(1)

    new_addr = generate_new_addr(org_addr, new_netrange)

    # 172.30.10.81/24
    print new_addr
